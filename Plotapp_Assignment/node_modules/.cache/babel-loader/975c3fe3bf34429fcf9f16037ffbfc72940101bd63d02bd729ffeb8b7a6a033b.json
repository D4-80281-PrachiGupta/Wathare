{"ast":null,"code":"var _jsxFileName = \"/home/gaurav/Documents/Projects/Wathare/Frontend/plotapp/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport ChartComponent from './ChartComponent';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [jsonData, setJsonData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/data.json'); // Adjust the path as needed\n        let data = await response.json();\n\n        // Add missing data if necessary\n        data = addMissingData(data);\n        setJsonData(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array ensures effect runs only once\n\n  useEffect(() => {\n    // Filter data based on your requirement\n    const filtered = jsonData; // You can filter based on any other criteria here\n    setFilteredData(filtered);\n  }, [jsonData]);\n\n  // Function to add missing data\n  const addMissingData = data => {\n    const newData = [];\n    for (let i = 0; i < data.length - 1; i++) {\n      newData.push(data[i]);\n      const ts1 = new Date(data[i].ts).getTime();\n      const ts2 = new Date(data[i + 1].ts).getTime();\n      if (ts2 - ts1 > 1000) {\n        // Assuming a 1 second difference\n        const missingTimestamps = getMissingTimestamps(data[i].ts, data[i + 1].ts);\n        missingTimestamps.forEach(ts => {\n          newData.push({\n            ts: ts.toISOString(),\n            machine_status: \"NA\",\n            vibration: \"NA\"\n          });\n        });\n      }\n    }\n    newData.push(data[data.length - 1]);\n    return newData;\n  };\n\n  // Function to get missing timestamps between two given timestamps\n  const getMissingTimestamps = (startTimestamp, endTimestamp) => {\n    const start = new Date(startTimestamp).getTime();\n    const end = new Date(endTimestamp).getTime();\n    const missingTimestamps = [];\n    for (let ts = start + 1000; ts < end; ts += 1000) {\n      // Assuming a 1 second difference\n      missingTimestamps.push(new Date(ts));\n    }\n    return missingTimestamps;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"fw-bold text-center\",\n      children: \"Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      style: {\n        display: 'flex'\n      },\n      children: jsonData.map(item => /*#__PURE__*/_jsxDEV(ChartComponent, {\n        ts: item.ts,\n        status: item.machine_status,\n        value: item.vibration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JKEHsXa2BcQwVph3KEIot/yoH/A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useState","useEffect","ChartComponent","jsxDEV","_jsxDEV","App","_s","jsonData","setJsonData","filteredData","setFilteredData","fetchData","response","fetch","data","json","addMissingData","error","console","filtered","newData","i","length","push","ts1","Date","ts","getTime","ts2","missingTimestamps","getMissingTimestamps","forEach","toISOString","machine_status","vibration","startTimestamp","endTimestamp","start","end","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","display","map","item","status","value","_c","$RefreshReg$"],"sources":["/home/gaurav/Documents/Projects/Wathare/Frontend/plotapp/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport ChartComponent from './ChartComponent';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\n\nfunction App() {\n  const [jsonData, setJsonData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/data.json'); // Adjust the path as needed\n        let data = await response.json();\n\n        // Add missing data if necessary\n        data = addMissingData(data);\n\n        setJsonData(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array ensures effect runs only once\n\n  useEffect(() => {\n    // Filter data based on your requirement\n    const filtered = jsonData; // You can filter based on any other criteria here\n    setFilteredData(filtered);\n  }, [jsonData]);\n\n  // Function to add missing data\n  const addMissingData = (data) => {\n    const newData = [];\n    for (let i = 0; i < data.length - 1; i++) {\n      newData.push(data[i]);\n      const ts1 = new Date(data[i].ts).getTime();\n      const ts2 = new Date(data[i + 1].ts).getTime();\n      if (ts2 - ts1 > 1000) { // Assuming a 1 second difference\n        const missingTimestamps = getMissingTimestamps(data[i].ts, data[i + 1].ts);\n        missingTimestamps.forEach(ts => {\n          newData.push({\n            ts: ts.toISOString(),\n            machine_status: \"NA\",\n            vibration: \"NA\"\n          });\n        });\n      }\n    }\n    newData.push(data[data.length - 1]);\n    return newData;\n  };\n\n  // Function to get missing timestamps between two given timestamps\n  const getMissingTimestamps = (startTimestamp, endTimestamp) => {\n    const start = new Date(startTimestamp).getTime();\n    const end = new Date(endTimestamp).getTime();\n    const missingTimestamps = [];\n    for (let ts = start + 1000; ts < end; ts += 1000) { // Assuming a 1 second difference\n      missingTimestamps.push(new Date(ts));\n    }\n    return missingTimestamps;\n  };\n\n  return (\n    <div>\n      <h1 className='fw-bold text-center'>Data</h1>\n      <div className='container-fluid' style={{ display: 'flex' }}>\n        {jsonData.map(item => (\n          < ChartComponent ts={item.ts} status={item.machine_status} value={item.vibration} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}