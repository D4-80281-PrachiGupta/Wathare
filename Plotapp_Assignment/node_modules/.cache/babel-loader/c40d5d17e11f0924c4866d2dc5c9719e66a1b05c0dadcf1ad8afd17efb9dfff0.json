{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Satej\\\\Desktop\\\\plotapp\\\\src\\\\App.js\";\n// import logo from './logo.svg';\n// import './App.css';\n// import { useState, useEffect } from 'react';\n// import ChartComponent from './ChartComponent';\n// import 'bootstrap/dist/css/bootstrap.css';\n// import 'bootstrap/dist/js/bootstrap.js';\n\n// function App() {\n//   const [jsonData, setJsonData] = useState([]);\n//   const [filteredData, setFilteredData] = useState([]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch('/sample-data.json'); // Adjust the path as needed\n//         let data = await response.json();\n\n//         // Add missing data if necessary\n//         data = addMissingData(data);\n//         data.sort((a, b) => new Date(a.ts) - new Date(b.ts));\n//         console.log(data);\n//         setJsonData(data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []); // Empty dependency array ensures effect runs only once\n\n//   useEffect(() => {\n//     // Filter data based on your requirement\n//     const filtered = jsonData; // You can filter based on any other criteria here\n//     setFilteredData(filtered);\n//   }, [jsonData]);\n\n//   // Function to add missing data\n//   const addMissingData = (data) => {\n//     const newData = [];\n//     for (let i = 0; i < data.length - 1; i++) {\n//       newData.push(data[i]);\n//       const ts1 = new Date(data[i].ts).getTime();\n//       const ts2 = new Date(data[i + 1].ts).getTime();\n//       if (ts2 - ts1 > 1000) { // Assuming a 1 second difference\n//         const missingTimestamps = getMissingTimestamps(data[i].ts, data[i + 1].ts);\n//         missingTimestamps.forEach(ts => {\n//           newData.push({\n//             ts: ts.toISOString(),\n//             machine_status: \"NA\",\n//             vibration: \"NA\"\n//           });\n//         });\n//       }\n//     }\n//     newData.push(data[data.length - 1]);\n//     return newData;\n//   };\n\n//   // Function to get missing timestamps between two given timestamps\n//   const getMissingTimestamps = (startTimestamp, endTimestamp) => {\n//     const start = new Date(startTimestamp).getTime();\n//     const end = new Date(endTimestamp).getTime();\n//     const missingTimestamps = [];\n//     for (let ts = start + 1000; ts < end; ts += 1000) { // Assuming a 1 second difference\n//       missingTimestamps.push(new Date(ts));\n//     }\n//     return missingTimestamps;\n//   };\n\n//   return (\n//     <div>\n//       <h1 className='fw-bold text-center'>Data</h1>\n//       <div className='container-fluid' style={{ display: 'flex' }}>\n//         {jsonData.map(item => (\n//           < ChartComponent ts={item.ts} status={item.machine_status} value={item.vibration} />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React from 'react';\n\n// ChartComponent with time scale and color indicators\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChartComponent({\n  ts,\n  status,\n  value\n}) {\n  const getStatusColor = status => {\n    switch (status) {\n      case 1:\n        return 'green';\n      case 0:\n        return 'yellow';\n      default:\n        return 'red';\n    }\n  };\n  const indicatorColor = getStatusColor(status);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timestamp\",\n      children: new Date(ts).toLocaleTimeString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-indicator\",\n      style: {\n        backgroundColor: indicatorColor\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n// App component with summary calculation\n_c = ChartComponent;\nfunction App() {\n  const jsonData = [{\n    ts: new Date('2024-04-17T12:00:00Z').toISOString(),\n    machine_status: 1,\n    vibration: 0.5\n  }, {\n    ts: new Date('2024-04-17T12:05:00Z').toISOString(),\n    machine_status: 0,\n    vibration: 0.3\n  }, {\n    ts: new Date('2024-04-17T12:10:00Z').toISOString(),\n    machine_status: 1,\n    vibration: 0.6\n  }\n  // Add more data as needed\n  ];\n  const calculateSummary = () => {\n    let onesCount = 0;\n    let zerosCount = 0;\n    let continuousOnes = 0;\n    let continuousZeros = 0;\n    jsonData.forEach((item, index) => {\n      if (item.machine_status === 1) {\n        onesCount++;\n        continuousOnes++;\n        continuousZeros = 0; // Reset continuous zeros count\n      } else if (item.machine_status === 0) {\n        zerosCount++;\n        continuousZeros++;\n        continuousOnes = 0; // Reset continuous ones count\n      } else {\n        // Handle missing data (if needed)\n      }\n    });\n    return {\n      onesCount,\n      zerosCount,\n      continuousOnes,\n      continuousZeros\n    };\n  };\n  const summaryData = calculateSummary();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: jsonData.map(item => /*#__PURE__*/_jsxDEV(ChartComponent, {\n        ts: item.ts,\n        status: item.machine_status,\n        value: item.vibration\n      }, item.ts, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Number of 1s\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Number of 0s\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Continuous 1s\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Continuous 0s\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: summaryData.onesCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: summaryData.zerosCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: summaryData.continuousOnes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: summaryData.continuousZeros\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChartComponent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ChartComponent","ts","status","value","getStatusColor","indicatorColor","className","children","Date","toLocaleTimeString","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","_c","App","jsonData","toISOString","machine_status","vibration","calculateSummary","onesCount","zerosCount","continuousOnes","continuousZeros","forEach","item","index","summaryData","map","_c2","$RefreshReg$"],"sources":["C:/Users/Satej/Desktop/plotapp/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n// import { useState, useEffect } from 'react';\n// import ChartComponent from './ChartComponent';\n// import 'bootstrap/dist/css/bootstrap.css';\n// import 'bootstrap/dist/js/bootstrap.js';\n\n// function App() {\n//   const [jsonData, setJsonData] = useState([]);\n//   const [filteredData, setFilteredData] = useState([]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch('/sample-data.json'); // Adjust the path as needed\n//         let data = await response.json();\n\n//         // Add missing data if necessary\n//         data = addMissingData(data);\n//         data.sort((a, b) => new Date(a.ts) - new Date(b.ts));\n//         console.log(data);\n//         setJsonData(data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []); // Empty dependency array ensures effect runs only once\n\n//   useEffect(() => {\n//     // Filter data based on your requirement\n//     const filtered = jsonData; // You can filter based on any other criteria here\n//     setFilteredData(filtered);\n//   }, [jsonData]);\n\n//   // Function to add missing data\n//   const addMissingData = (data) => {\n//     const newData = [];\n//     for (let i = 0; i < data.length - 1; i++) {\n//       newData.push(data[i]);\n//       const ts1 = new Date(data[i].ts).getTime();\n//       const ts2 = new Date(data[i + 1].ts).getTime();\n//       if (ts2 - ts1 > 1000) { // Assuming a 1 second difference\n//         const missingTimestamps = getMissingTimestamps(data[i].ts, data[i + 1].ts);\n//         missingTimestamps.forEach(ts => {\n//           newData.push({\n//             ts: ts.toISOString(),\n//             machine_status: \"NA\",\n//             vibration: \"NA\"\n//           });\n//         });\n//       }\n//     }\n//     newData.push(data[data.length - 1]);\n//     return newData;\n//   };\n\n//   // Function to get missing timestamps between two given timestamps\n//   const getMissingTimestamps = (startTimestamp, endTimestamp) => {\n//     const start = new Date(startTimestamp).getTime();\n//     const end = new Date(endTimestamp).getTime();\n//     const missingTimestamps = [];\n//     for (let ts = start + 1000; ts < end; ts += 1000) { // Assuming a 1 second difference\n//       missingTimestamps.push(new Date(ts));\n//     }\n//     return missingTimestamps;\n//   };\n\n//   return (\n//     <div>\n//       <h1 className='fw-bold text-center'>Data</h1>\n//       <div className='container-fluid' style={{ display: 'flex' }}>\n//         {jsonData.map(item => (\n//           < ChartComponent ts={item.ts} status={item.machine_status} value={item.vibration} />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React from 'react';\n\n// ChartComponent with time scale and color indicators\nfunction ChartComponent({ ts, status, value }) {\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 1:\n        return 'green';\n      case 0:\n        return 'yellow';\n      default:\n        return 'red';\n    }\n  };\n\n  const indicatorColor = getStatusColor(status);\n\n  return (\n    <div className=\"chart-item\">\n      <div className=\"timestamp\">{new Date(ts).toLocaleTimeString()}</div>\n      <div className=\"status-indicator\" style={{ backgroundColor: indicatorColor }}></div>\n    </div>\n  );\n}\n\n// App component with summary calculation\nfunction App() {\n  const jsonData = [\n    { ts: new Date('2024-04-17T12:00:00Z').toISOString(), machine_status: 1, vibration: 0.5 },\n    { ts: new Date('2024-04-17T12:05:00Z').toISOString(), machine_status: 0, vibration: 0.3 },\n    { ts: new Date('2024-04-17T12:10:00Z').toISOString(), machine_status: 1, vibration: 0.6 },\n    // Add more data as needed\n  ];\n\n  const calculateSummary = () => {\n    let onesCount = 0;\n    let zerosCount = 0;\n    let continuousOnes = 0;\n    let continuousZeros = 0;\n\n    jsonData.forEach((item, index) => {\n      if (item.machine_status === 1) {\n        onesCount++;\n        continuousOnes++;\n        continuousZeros = 0; // Reset continuous zeros count\n      } else if (item.machine_status === 0) {\n        zerosCount++;\n        continuousZeros++;\n        continuousOnes = 0; // Reset continuous ones count\n      } else {\n        // Handle missing data (if needed)\n      }\n    });\n\n    return {\n      onesCount,\n      zerosCount,\n      continuousOnes,\n      continuousZeros,\n    };\n  };\n\n  const summaryData = calculateSummary();\n\n  return (\n    <div className=\"app-container\">\n      <h1>Data</h1>\n      <div className=\"chart-container\">\n        {jsonData.map((item) => (\n          <ChartComponent key={item.ts} ts={item.ts} status={item.machine_status} value={item.vibration} />\n        ))}\n      </div>\n      <div className=\"summary-container\">\n        <h2>Summary</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Number of 1s</th>\n              <th>Number of 0s</th>\n              <th>Continuous 1s</th>\n              <th>Continuous 0s</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{summaryData.onesCount}</td>\n              <td>{summaryData.zerosCount}</td>\n              <td>{summaryData.continuousOnes}</td>\n              <td>{summaryData.continuousZeros}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,cAAcA,CAAC;EAAEC,EAAE;EAAEC,MAAM;EAAEC;AAAM,CAAC,EAAE;EAC7C,MAAMC,cAAc,GAAIF,MAAM,IAAK;IACjC,QAAQA,MAAM;MACZ,KAAK,CAAC;QACJ,OAAO,OAAO;MAChB,KAAK,CAAC;QACJ,OAAO,QAAQ;MACjB;QACE,OAAO,KAAK;IAChB;EACF,CAAC;EAED,MAAMG,cAAc,GAAGD,cAAc,CAACF,MAAM,CAAC;EAE7C,oBACEH,OAAA;IAAKO,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzBR,OAAA;MAAKO,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAE,IAAIC,IAAI,CAACP,EAAE,CAAC,CAACQ,kBAAkB,CAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACpEd,OAAA;MAAKO,SAAS,EAAC,kBAAkB;MAACQ,KAAK,EAAE;QAAEC,eAAe,EAAEV;MAAe;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjF,CAAC;AAEV;;AAEA;AAAAG,EAAA,GAtBShB,cAAc;AAuBvB,SAASiB,GAAGA,CAAA,EAAG;EACb,MAAMC,QAAQ,GAAG,CACf;IAAEjB,EAAE,EAAE,IAAIO,IAAI,CAAC,sBAAsB,CAAC,CAACW,WAAW,CAAC,CAAC;IAAEC,cAAc,EAAE,CAAC;IAAEC,SAAS,EAAE;EAAI,CAAC,EACzF;IAAEpB,EAAE,EAAE,IAAIO,IAAI,CAAC,sBAAsB,CAAC,CAACW,WAAW,CAAC,CAAC;IAAEC,cAAc,EAAE,CAAC;IAAEC,SAAS,EAAE;EAAI,CAAC,EACzF;IAAEpB,EAAE,EAAE,IAAIO,IAAI,CAAC,sBAAsB,CAAC,CAACW,WAAW,CAAC,CAAC;IAAEC,cAAc,EAAE,CAAC;IAAEC,SAAS,EAAE;EAAI;EACxF;EAAA,CACD;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAIC,SAAS,GAAG,CAAC;IACjB,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,cAAc,GAAG,CAAC;IACtB,IAAIC,eAAe,GAAG,CAAC;IAEvBR,QAAQ,CAACS,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAChC,IAAID,IAAI,CAACR,cAAc,KAAK,CAAC,EAAE;QAC7BG,SAAS,EAAE;QACXE,cAAc,EAAE;QAChBC,eAAe,GAAG,CAAC,CAAC,CAAC;MACvB,CAAC,MAAM,IAAIE,IAAI,CAACR,cAAc,KAAK,CAAC,EAAE;QACpCI,UAAU,EAAE;QACZE,eAAe,EAAE;QACjBD,cAAc,GAAG,CAAC,CAAC,CAAC;MACtB,CAAC,MAAM;QACL;MAAA;IAEJ,CAAC,CAAC;IAEF,OAAO;MACLF,SAAS;MACTC,UAAU;MACVC,cAAc;MACdC;IACF,CAAC;EACH,CAAC;EAED,MAAMI,WAAW,GAAGR,gBAAgB,CAAC,CAAC;EAEtC,oBACEvB,OAAA;IAAKO,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BR,OAAA;MAAAQ,QAAA,EAAI;IAAI;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACbd,OAAA;MAAKO,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC7BW,QAAQ,CAACa,GAAG,CAAEH,IAAI,iBACjB7B,OAAA,CAACC,cAAc;QAAeC,EAAE,EAAE2B,IAAI,CAAC3B,EAAG;QAACC,MAAM,EAAE0B,IAAI,CAACR,cAAe;QAACjB,KAAK,EAAEyB,IAAI,CAACP;MAAU,GAAzEO,IAAI,CAAC3B,EAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoE,CACjG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNd,OAAA;MAAKO,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChCR,OAAA;QAAAQ,QAAA,EAAI;MAAO;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBd,OAAA;QAAAQ,QAAA,gBACER,OAAA;UAAAQ,QAAA,eACER,OAAA;YAAAQ,QAAA,gBACER,OAAA;cAAAQ,QAAA,EAAI;YAAY;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACrBd,OAAA;cAAAQ,QAAA,EAAI;YAAY;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACrBd,OAAA;cAAAQ,QAAA,EAAI;YAAa;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACtBd,OAAA;cAAAQ,QAAA,EAAI;YAAa;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRd,OAAA;UAAAQ,QAAA,eACER,OAAA;YAAAQ,QAAA,gBACER,OAAA;cAAAQ,QAAA,EAAKuB,WAAW,CAACP;YAAS;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAChCd,OAAA;cAAAQ,QAAA,EAAKuB,WAAW,CAACN;YAAU;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACjCd,OAAA;cAAAQ,QAAA,EAAKuB,WAAW,CAACL;YAAc;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACrCd,OAAA;cAAAQ,QAAA,EAAKuB,WAAW,CAACJ;YAAe;cAAAhB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACmB,GAAA,GArEQf,GAAG;AAuEZ,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAgB,GAAA;AAAAC,YAAA,CAAAjB,EAAA;AAAAiB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}