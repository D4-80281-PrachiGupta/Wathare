{"ast":null,"code":"var _jsxFileName = \"/home/gaurav/Documents/Projects/Wathare/Frontend/plotapp/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [jsonData, setJsonData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const targetTimestamp = \"2023-12-31T19:12:00.000+00:00\"; // Change this to your target timestamp\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/data.json'); // Adjust the path as needed\n        const data = await response.json();\n        setJsonData(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array ensures effect runs only once\n\n  useEffect(() => {\n    const filtered = jsonData.filter(item => item.time === targetTimestamp);\n    setFilteredData(filtered);\n  }, [jsonData, targetTimestamp]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"JSON Data for Timestamp: \", targetTimestamp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredData.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"ID: \", item.id, \", Time: \", item.time, \", Value: \", item.value.toString()]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JKEHsXa2BcQwVph3KEIot/yoH/A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useState","useEffect","jsxDEV","_jsxDEV","App","_s","jsonData","setJsonData","filteredData","setFilteredData","targetTimestamp","fetchData","response","fetch","data","json","error","console","filtered","filter","item","time","children","fileName","_jsxFileName","lineNumber","columnNumber","map","id","value","toString","_c","$RefreshReg$"],"sources":["/home/gaurav/Documents/Projects/Wathare/Frontend/plotapp/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n  const [jsonData, setJsonData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const targetTimestamp = \"2023-12-31T19:12:00.000+00:00\"; // Change this to your target timestamp\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/data.json'); // Adjust the path as needed\n        const data = await response.json();\n        setJsonData(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array ensures effect runs only once\n\n  useEffect(() => {\n    const filtered = jsonData.filter(item => item.time === targetTimestamp);\n    setFilteredData(filtered);\n  }, [jsonData, targetTimestamp]);\n\n  return (\n    <div>\n      <h1>JSON Data for Timestamp: {targetTimestamp}</h1>\n      <ul>\n        {filteredData.map(item => (\n          <li key={item.id}>\n            ID: {item.id}, Time: {item.time}, Value: {item.value.toString()}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMU,eAAe,GAAG,+BAA+B,CAAC,CAAC;;EAEzDT,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;QAC5C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCR,WAAW,CAACO,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERV,SAAS,CAAC,MAAM;IACd,MAAMiB,QAAQ,GAAGZ,QAAQ,CAACa,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAKX,eAAe,CAAC;IACvED,eAAe,CAACS,QAAQ,CAAC;EAC3B,CAAC,EAAE,CAACZ,QAAQ,EAAEI,eAAe,CAAC,CAAC;EAE/B,oBACEP,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,GAAI,2BAAyB,EAACZ,eAAe;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnDvB,OAAA;MAAAmB,QAAA,EACGd,YAAY,CAACmB,GAAG,CAACP,IAAI,iBACpBjB,OAAA;QAAAmB,QAAA,GAAkB,MACZ,EAACF,IAAI,CAACQ,EAAE,EAAC,UAAQ,EAACR,IAAI,CAACC,IAAI,EAAC,WAAS,EAACD,IAAI,CAACS,KAAK,CAACC,QAAQ,CAAC,CAAC;MAAA,GADxDV,IAAI,CAACQ,EAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACrB,EAAA,CApCQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}